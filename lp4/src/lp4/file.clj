(in-ns 'lp4.main)
(load "class")
(load "file")
(require '[clojure.string :as str])
(require '[clojure.java.io :as io])

(defn catalogo [l]
		(do
			(def lista l)
		(if (.exists (io/file "catalogo.txt")) 
		(do
			
			(def linhas (str/split (slurp "catalogo.txt") #"\n"))
			(while (and (not (empty? linhas)) (not= (first linhas) "")) 
				(do
				(def categoria (first linhas))
				(def linhas (rest linhas))
				(def id (Integer/parseInt (first linhas)))
				(def linhas (rest linhas))
				(def owner (first linhas))
				(def linhas (rest linhas))
				(case categoria
					"casa" (do
							(def nquartos (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def nvagas (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def npav (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def apav (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def pm2pav (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def al (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def pm2al (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def lista (cons (Casa. id owner nquartos nvagas npav apav pm2pav al pm2al) lista))
						)
					"apto" (do
							(def nquartos (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def nvagas (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def andar (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def ac (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def pm2ac (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def lazer (first linhas))
							(def linhas (rest linhas))
							(def andares (Integer/parseInt (first linhas)))
							(def linhas (rest linhas))
							(def lista (cons (Apto. id owner nquartos nvagas andar ac pm2ac lazer andares) lista))
							;(nquartos nvagas andar ac pm2ac lazer andares)
						) 
					"trapez" (do
							(def solo (first linhas))
							(def linhas (rest linhas))
							(def pm2 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def base1 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def base2 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def altura (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def lista (cons (Terreno. id owner categoria solo pm2 base1 base2 altura) lista))
							;(categoria solo pm2 base1 base2 altura)
						)
					"triang" (do
							(def solo (first linhas))
							(def linhas (rest linhas))
							(def pm2 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def base1 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def altura (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def lista (cons (Terreno. id owner categoria solo pm2 base1 0 altura) lista))
						)
					"retang" (do
							(def solo (first linhas))
							(def linhas (rest linhas))
							(def pm2 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def base1 (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def altura (Double/parseDouble (first linhas)))
							(def linhas (rest linhas))
							(def lista (cons (Terreno. id owner categoria solo pm2 base1 0 altura) lista))
						)
					(println "Erro na categoria do catalogo:" categoria))
				(def linhas (rest linhas))
				)
			)
		)
		(println "Catalogo nao encontrado."))
		lista
	)
)

(defn atual[l]
	(do
		(def lista l)
		(if (.exists (io/file "atual.txt"))
			(do
				(def linhas (str/split (slurp "atual.txt") #"\n"))
				(while (and (not (empty? linhas)) (not= (first linhas) "")) 
					(do
						(def operacao (first linhas))
						(def linhas (rest linhas))
						(case operacao
							"i" (do
								(def categoria (first linhas))
									(def linhas (rest linhas))
									(def id (Integer/parseInt (first linhas)))
									(def linhas (rest linhas))
									(def owner (first linhas))
									(def linhas (rest linhas))
									(case categoria
										"casa" (do
												(def nquartos (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def nvagas (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def npav (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def apav (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def pm2pav (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def al (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def pm2al (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Casa. id owner nquartos nvagas npav apav pm2pav al pm2al) lista))
											)
										"apto" (do
												(def nquartos (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def nvagas (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def andar (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def ac (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def pm2ac (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lazer (first linhas))
												(def linhas (rest linhas))
												(def andares (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Apto. id owner nquartos nvagas andar ac pm2ac lazer andares) lista))
												;(nquartos nvagas andar ac pm2ac lazer andares)
											) 
										"trapez" (do
												(def solo (first linhas))
												(def linhas (rest linhas))
												(def pm2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base1 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def altura (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Terreno. id owner categoria solo pm2 base1 base2 altura) lista))
												;(categoria solo pm2 base1 base2 altura)
											)
										"triang" (do
												(def solo (first linhas))
												(def linhas (rest linhas))
												(def pm2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base1 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def altura (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Terreno. id owner categoria solo pm2 base1 0 altura) lista))
											)
										"retang" (do
												(def solo (first linhas))
												(def linhas (rest linhas))
												(def pm2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base1 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def altura (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Terreno. id owner categoria solo pm2 base1 0 altura) lista))
											)
										(println "Erro na categoria do atual:" categoria))
								)
							"a" (do
									(def categoria (first linhas))
									(def linhas (rest linhas))
									(def id (Integer/parseInt (first linhas)))
									(def linhas (rest linhas))
									(def owner (first linhas))
									(def linhas (rest linhas))
									(def lista (remover lista id))
									(case categoria
										"casa" (do
												(def nquartos (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def nvagas (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def npav (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def apav (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def pm2pav (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def al (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def pm2al (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Casa. id owner nquartos nvagas npav apav pm2pav al pm2al) lista))
											)
										"apto" (do
												(def nquartos (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def nvagas (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def andar (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def ac (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def pm2ac (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lazer (first linhas))
												(def linhas (rest linhas))
												(def andares (Integer/parseInt (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Apto. id owner nquartos nvagas andar ac pm2ac lazer andares) lista))
												;(nquartos nvagas andar ac pm2ac lazer andares)
											) 
										"trapez" (do
												(def solo (first linhas))
												(def linhas (rest linhas))
												(def pm2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base1 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def altura (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Terreno. id owner categoria solo pm2 base1 base2 altura) lista))
												;(categoria solo pm2 base1 base2 altura)
											)
										"triang" (do
												(def solo (first linhas))
												(def linhas (rest linhas))
												(def pm2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base1 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def altura (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Terreno. id owner categoria solo pm2 base1 0 altura) lista))
											)
										"retang" (do
												(def solo (first linhas))
												(def linhas (rest linhas))
												(def pm2 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def base1 (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def altura (Double/parseDouble (first linhas)))
												(def linhas (rest linhas))
												(def lista (cons (Terreno. id owner categoria solo pm2 base1 0 altura) lista))
											)
										(println "Erro na categoria do atual:" categoria))

								)
							"e" (do
									(def id (Integer/parseInt (first linhas)))
									(def linhas (rest linhas))
									(def lista (remover lista id))
								)
							(println "Erro na operacao do atual:" atual))
						(def linhas (rest linhas))
					)
				)
			)
			(println "Atual nao encontrado."))
		lista)
)

(defn espec[l]
	(do
		(def lista l)
		(def soma 0)
		(if (.exists (io/file "espec.txt"))
			(do
				(def linhas (str/split (slurp "espec.txt") #"\n"))
				(def pimoveis (Integer/parseInt (first linhas)))
				(def linhas (rest linhas))
				(def pargilosos (Integer/parseInt (first linhas)))
				(def linhas (rest linhas))
				(def alimite (Double/parseDouble (first linhas)))
				(def linhas (rest linhas))
				(def plimite (Double/parseDouble (first linhas)))
				(def linhas (rest linhas))
				(def i (Integer/parseInt (first linhas)))
				(def linhas (rest linhas))
				(def j (Integer/parseInt (first linhas)))
				(def linhas (rest linhas))
				(def k (Integer/parseInt (first linhas)))
				(def casas (criarCasas lista plimite alimite))
				(def casas (sort sortCasas casas))
				(def argilosos (criarArgilosos lista))
				(def argilosos (sort sortArgiloso argilosos))
				(def limiteImoveis (int (/ (* pimoveis (count lista)) 100)))
				(def limiteArgilosos (int (/ (* pargilosos (count argilosos)) 100)))
				(def linha "")
				(def contador (+ (count lista) 1))
				(def contador (- contador limiteImoveis))
				(def c2 1)
				(while (<= contador (count lista))
					(do
						(if (= c2 i) (do
							(def temp (Id (nth lista (- contador 1)))) 
							(def soma (+ soma temp))) ())
						(if (> c2 1) (def linha (str linha ", ")) ())
						(def linha (str linha (Id (nth lista (- contador 1)))))
						(def contador (+ contador 1))
						(def c2 (+ c2 1))
					))
				(def linha (str linha "\n"))
				(def contador (+ (count argilosos) 1))
				(def contador (- contador limiteArgilosos))
				(def c2 1)
				(while (<= contador (count argilosos)) 
					(do
						(if (= c2 j) (do
							(def temp (Id (nth argilosos (- contador 1)))) 
							(def soma (+ soma temp))) ())
						(if (> c2 1) (def linha (str linha ", ")) ())
						(def linha (str linha (Id (nth argilosos (- contador 1)))))
						(def contador (+ contador 1))
						(def c2 (+ c2 1))
					))
				(def linha (str linha "\n"))
				(def contador 1)
				(while (<= contador (count casas)) 
					(do
						(if (= contador k) (do
							(def temp (Id (nth casas (- contador 1)))) 
							(def soma (+ soma temp))) ())
						(if (> contador 1) (def linha (str linha ", ")) ())
						(def linha (str linha (Id (nth casas (- contador 1)))))
						(def contador (+ contador 1))
					))
				(def linha (str linha "\n"))
				(spit "saida.txt" linha)
				(spit "result.txt" soma)
				;(println argilosos)
				;(println (count argilosos))
				;(println casas)
				;(println (count casas))
				)
			(println "Espec nao encontrado."))


	lista)
)